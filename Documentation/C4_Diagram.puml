@startuml GameHubPurchaseAndRecommendationLayer

package "Domain Models" {
    class Game {
        -Long id
        -String title
        -String description
        -Set<Genre> genres
        -Date releaseDate
        -String developer
        -Double price
        -List<Review> reviews
        -List<Purchase> purchases
    }

    class Purchase {
        -Long id
        -User user
        -Game game
        -Date purchaseDate
        -Double amount
    }

    class User {
        -Long id
        -String username
        -String email
        -List<Purchase> purchases
    }

    enum Genre {
        ACTION, ADVENTURE, RPG, ...
    }
}

package "Controllers" {
    class GameController {
        +createGame(Game) : ResponseEntity<Game>
        +getGameById(Long) : ResponseEntity<?>
        +getGamesByUserId(Long) : List<Game>
        +getAllGames() : ResponseEntity<List<Game>>
        +updateGame(Long, Game) : ResponseEntity<Game>
        +deleteGame(Long) : ResponseEntity<Void>
    }

    class PurchaseController {
        +purchaseGame(Long, Long) : ResponseEntity<?>
        +getPurchases(Long, Date, Double, Double) : ResponseEntity<List<PurchaseDTO>>
    }

    class RecommendationController {
        +getRecommendations(Long) : ResponseEntity<List<Game>>
    }
}

package "Services" {
    interface GameService {
        +createGame(Game) : Game
        +getGameById(Long) : Optional<Game>
        +getAllGames() : List<Game>
        +updateGame(Long, Game) : Game
        +deleteGame(Long) : void
        +getGamesByUserId(Long) : List<Game>
    }

    interface PurchaseService {
        +purchaseGame(Long, Long) : Purchase
        +getPurchases(Long, Date, Double, Double) : List<PurchaseDTO>
    }

    interface RecommendationService {
        +getRecommendationsForUser(Long) : List<Game>
    }

    class GameServiceImpl {
        -GameRepository gameRepository
        -UserRepository userRepository
    }

    class PurchaseServiceImpl {
        -PurchaseRepository purchaseRepository
        -UserRepository userRepository
        -GameRepository gameRepository
    }

    class RecommendationServiceImpl {
        -PurchaseRepository purchaseRepository
        -GameRepository gameRepository
    }
}

package "Repositories" {
    interface GameRepository {
        +findRecommendations(Genre, Set<Long>) : List<Game>
    }

    interface PurchaseRepository {
        +findByUserIdAndPurchaseDateAfter(Long, Date) : List<Purchase>
        +findByUserIdAndPurchaseDateAfterAndAmountGreaterThanEqual(Long, Date, Double) : List<Purchase>
        +findByUserIdAndPurchaseDateAfterAndAmountLessThan(Long, Date, Double) : List<Purchase>
        +findByUserIdAndPurchaseDateAfterAndAmountBetween(Long, Date, Double, Double) : List<Purchase>
        +findByUserId(Long) : List<Purchase>
    }

    interface UserRepository {
        +findById(Long) : Optional<User>
    }
}

GameController ..> GameService : uses
PurchaseController ..> PurchaseService : uses
RecommendationController ..> RecommendationService : uses

GameServiceImpl ..> GameRepository : uses
GameServiceImpl ..> UserRepository : uses
PurchaseServiceImpl ..> PurchaseRepository : uses
PurchaseServiceImpl ..> GameRepository : uses
PurchaseServiceImpl ..> UserRepository : uses
RecommendationServiceImpl ..> GameRepository : uses
RecommendationServiceImpl ..> PurchaseRepository : uses

@enduml