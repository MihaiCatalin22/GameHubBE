@startuml GameHubPurchaseAndRecommendationLayer

' Define packages for logical grouping
package "Domain Models" {
    class Game {
        -Long id
        -String title
        -String description
        -Set<Genre> genres
        -Date releaseDate
        -String developer
        -Double price
        -List<Review> reviews
        -List<Purchase> purchases
    }

    class Purchase {
        -Long id
        -User user
        -Game game
        -Date purchaseDate
        -Double amount
    }

    class User {
        -Long id
        -String username
        -String email
        -String passwordHash
        -String profilePicture
        -String description
        -List<Role> roles
        -List<Review> reviews
        -List<Purchase> purchases
        -List<FriendRelationship> friendRelationships
    }

    enum Genre {
        ACTION, ADVENTURE, RPG, ...
    }

    class Review {
        -Long id
        -String content
        -User user
        -Game game
        -Date reviewDate
        -int rating
    }
}

package "Controllers" {
    class GameController {
        +createGame(Game) : ResponseEntity<Game>
        +getGameById(Long) : ResponseEntity<?>
        +getGamesByUserId(Long) : List<Game>
        +getAllGames() : ResponseEntity<List<Game>>
        +updateGame(Long, Game) : ResponseEntity<Game>
        +deleteGame(Long) : ResponseEntity<Void>
    }

    class PurchaseController {
        +purchaseGame(Long, Long) : ResponseEntity<?>
        +getPurchases(Long, Date, Double, Double) : ResponseEntity<List<PurchaseDTO>>
    }

    class RecommendationController {
        +getRecommendations(Long) : ResponseEntity<List<Game>>
    }

    class AdminController {
        +getSalesStatistics(String, int) : ResponseEntity<List<GamesSalesStatisticsDTO>>
    }
}

package "Services" {
    interface GameService {
        +createGame(Game) : Game
        +getGameById(Long) : Optional<Game>
        +getAllGames() : List<Game>
        +updateGame(Long, Game) : Game
        +deleteGame(Long) : void
        +getGamesByUserId(Long) : List<Game>
    }

    interface PurchaseService {
        +purchaseGame(Long, Long) : Purchase
        +getPurchases(Long, Date, Double, Double) : List<PurchaseDTO>
        +checkOwnership(Long, Long) : boolean
        +getSalesStatistics(String, int) : List<GamesSalesStatisticsDTO>
    }

    interface RecommendationService {
        +getRecommendationsForUser(Long) : List<Game>
    }

    class GameServiceImpl implements GameService {
        -GameRepository gameRepository
        -UserRepository userRepository
    }

    class PurchaseServiceImpl implements PurchaseService {
        -PurchaseRepository purchaseRepository
        -UserRepository userRepository
        -GameRepository gameRepository
    }

    class RecommendationServiceImpl implements RecommendationService {
        -PurchaseRepository purchaseRepository
        -GameRepository gameRepository
    }
}

package "Repositories" {
    interface GameRepository {
        +findRecommendations(Genre, Set<Long>) : List<Game>
        +existsByTitleAndIdNot(String, Long) : boolean
    }

    interface PurchaseRepository {
        +findByUserIdAndPurchaseDateAfter(Long, Date) : List<Purchase>
        +findByUserIdAndPurchaseDateAfterAndAmountGreaterThanEqual(Long, Date, Double) : List<Purchase>
        +findByUserIdAndPurchaseDateAfterAndAmountLessThan(Long, Date, Double) : List<Purchase>
        +findByUserIdAndPurchaseDateAfterAndAmountBetween(Long, Date, Double, Double) : List<Purchase>
        +findByUserId(Long) : List<Purchase>
        +existsByUserIdAndGameId(Long, Long) : boolean
        +findGameSalesStatisticsByTitleAndDateRange(String, Date, Date) : List<Object[]>
    }

    interface UserRepository {
        +findById(Long) : Optional<User>
        +findByUsername(String) : Optional<User>
        +existsByUsername(String) : boolean
        +existsByEmail(String) : boolean
    }
}

GameController <-- GameService : "has"
PurchaseController <-- PurchaseService : "has"
RecommendationController <-- RecommendationService : "has"
AdminController <-- PurchaseService : "has"

GameServiceImpl --> GameRepository : "has"
GameServiceImpl --> UserRepository : "has"
PurchaseServiceImpl --> PurchaseRepository : "has"
PurchaseServiceImpl --> GameRepository : "has"
PurchaseServiceImpl --> UserRepository : "has"
RecommendationServiceImpl --> GameRepository : "has"
RecommendationServiceImpl --> PurchaseRepository : "has"

@enduml
